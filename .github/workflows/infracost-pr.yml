#infracost-pr.yml
name: Infracost PR Analysis
on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'eks/**'
      - 'vpc/**'
      - 'kubernetes-addons/**'
      - '.infracost/**'
permissions:
  id-token: write
  contents: read
  
jobs:
  infracost:
    name: Cost Analysis and Policy Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Setup OPA
        uses: open-policy-agent/setup-opa@v2
        with:
          version: latest

      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: '${{ github.event.pull_request.base.ref }}'

      - name: Configure AWS Credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::649203810550:role/EksOIDCRole
          aws-region: eu-west-1   

      - name: Generate Infracost cost estimate baseline
        run: |
          infracost breakdown --config-file=.infracost/infracost.yml \
                              --format=json \
                              --out-file=/tmp/infracost-base.json

      - name: Checkout PR branch
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Debug - Check directory structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Root directory contents:"
          ls -la
          
          for dir in eks vpc kubernetes-addons; do
            if [ -d "$dir" ]; then
              echo "Contents of $dir directory:"
              ls -la "$dir/"
            else
              echo "$dir directory does not exist"
            fi
          done

      - name: Setup mock variables for Terraform modules
        run: |
          # Copy example tfvars files to terraform.tfvars for each module
          for dir in eks vpc kubernetes-addons; do
            if [ -d "$dir" ]; then
              echo "Processing $dir module..."
              
              # Look for any file ending with terraform.tfvars.example (with or without number prefix)
              example_file=$(find "$dir" -name "*terraform.tfvars.example" -type f | head -1)
              
              if [ -n "$example_file" ]; then
                echo "‚úÖ Found example file: $example_file"
                cp "$example_file" "$dir/terraform.tfvars"
                echo "‚úÖ Copied $(basename "$example_file") to $dir/terraform.tfvars"
                echo "Contents preview:"
                head -3 "$dir/terraform.tfvars" | sed 's/^/  /'
              else
                echo "‚ö†Ô∏è Warning: No terraform.tfvars.example found for $dir module"
                echo "Files in $dir:"
                ls -la "$dir/" | grep -E "\.(tf|tfvars)" || echo "  No .tf or .tfvars files found"
                
                # Create empty tfvars file so terraform doesn't fail
                touch "$dir/terraform.tfvars"
                echo "‚úÖ Created empty terraform.tfvars for $dir"
              fi
              echo ""
            else
              echo "‚ö†Ô∏è Directory $dir does not exist"
            fi
          done

      - name: Terraform Init and Plan (for policy evaluation)
        run: |
          # Initialize and plan each module for policy evaluation
          for dir in eks vpc kubernetes-addons; do
            if [ -d "$dir" ]; then
              echo "Planning $dir module..."
              cd $dir
              terraform init -input=false
              terraform plan -out=tfplan.binary -input=false || echo "Plan failed for $dir, continuing..."
              terraform show -json tfplan.binary > ../tfplan-${dir}.json 2>/dev/null || echo "Show failed for $dir, continuing..."
              cd ..
            fi
          done

      - name: Generate Infracost breakdown for policies
        run: |
          infracost breakdown --config-file=.infracost/infracost.yml \
                              --format=json \
                              --out-file=/tmp/infracost-breakdown.json

      - name: Generate Infracost diff
        run: |
          infracost diff --config-file=.infracost/infracost.yml \
                          --format=json \
                          --compare-to=/tmp/infracost-base.json \
                          --out-file=/tmp/infracost.json

      - name: Debug and Run Tagging Policies
        continue-on-error: true
        run: |
          echo "üè∑Ô∏è Checking Tagging Policies..."
          
          # Debug: Check if policy files exist
          echo "üìÅ Checking policy files:"
          if [ -f ".infracost/policies/tagging.rego" ]; then
            echo "‚úÖ tagging.rego found"
            echo "üìÑ Policy file size: $(wc -l < .infracost/policies/tagging.rego) lines"
            echo "üìÑ First 10 lines of policy:"
            head -10 .infracost/policies/tagging.rego | sed 's/^/  /'
          else
            echo "‚ùå tagging.rego NOT found"
            echo "üìÅ Contents of .infracost/policies/:"
            ls -la .infracost/policies/ 2>/dev/null || echo "  Directory doesn't exist"
          fi
          
          echo ""
          echo "üìã Checking Terraform plan files:"
          policy_violations=0
          untagged_resources=()
          
          for plan_file in tfplan-*.json; do
            if [ -f "$plan_file" ]; then
              echo "üìÑ Processing $plan_file..."
              
              # Check if the JSON file is valid
              if ! jq empty "$plan_file" 2>/dev/null; then
                echo "‚ùå Invalid JSON in $plan_file"
                echo "üìÑ File contents preview:"
                head -5 "$plan_file" | sed 's/^/  /'
                continue
              fi
              
              echo "‚úÖ Valid JSON file"
              
              # Extract resources that will be created/updated and check their tags
              echo "üîç Analyzing resources in $plan_file for missing tags..."
              
              # Find resources without required tags
              missing_tags=$(jq -r '
                .resource_changes[]? | 
                select(.change.actions[]? == "create" or .change.actions[]? == "update") |
                select(.type | test("aws_(instance|ebs_volume|eks_cluster|eks_node_group|rds_instance|s3_bucket|elasticache|lambda_function|ecs_service|security_group|launch_template)")) |
                select(.change.after.tags // {} | 
                  (has("Environment") and has("Owner") and has("Project") and has("CostCenter")) | not
                ) |
                {
                  resource: .address,
                  type: .type,
                  missing_tags: (["Environment", "Owner", "Project", "CostCenter"] - (.change.after.tags // {} | keys)),
                  current_tags: (.change.after.tags // {})
                }
              ' "$plan_file" 2>/dev/null || echo '[]')
              
              if [ "$missing_tags" != "[]" ] && [ "$missing_tags" != "" ] && [ "$missing_tags" != "null" ]; then
                echo "‚ùå Resources with missing required tags found in $plan_file:"
                echo "$missing_tags" | jq -r '"  üè∑Ô∏è  " + .resource + " (" + .type + ")"'
                echo "$missing_tags" | jq -r '"     Missing tags: " + (.missing_tags | join(", "))'
                echo "$missing_tags" | jq -r 'if (.current_tags | length) > 0 then "     Current tags: " + (.current_tags | keys | join(", ")) else "     Current tags: none" end'
                echo ""
                
                # Add to untagged resources array
                while IFS= read -r resource; do
                  untagged_resources+=("$resource")
                done < <(echo "$missing_tags" | jq -r '.resource')
                
                policy_violations=$((policy_violations + 1))
              else
                echo "‚úÖ All billable resources properly tagged in $plan_file"
              fi
              
              # If OPA policy exists, try to run it with better error handling
              if [ -f ".infracost/policies/tagging.rego" ]; then
                echo "üîç Running OPA policy evaluation for $plan_file..."
                
                # Test the policy syntax first
                if opa fmt .infracost/policies/tagging.rego > /dev/null 2>&1; then
                  echo "‚úÖ Policy syntax is valid"
                  
                  # Run the policy evaluation with detailed error output
                  opa_result=$(opa eval --data .infracost/policies/tagging.rego --input "$plan_file" --format=json 'data.infracost.policies.tagging.deny[_]' 2>&1)
                  opa_exit_code=$?
                  
                  echo "üîç OPA exit code: $opa_exit_code"
                  
                  if [ $opa_exit_code -eq 0 ]; then
                    if [ "$opa_result" != "[]" ] && [ "$opa_result" != "" ] && [ "$opa_result" != "null" ]; then
                      echo "‚ùå OPA policy violations:"
                      echo "$opa_result" | jq -r 'if type == "array" then .[] | "  ‚Ä¢ " + (.msg // tostring) else "  ‚Ä¢ " + . end' 2>/dev/null || echo "  ‚Ä¢ $opa_result"
                    else
                      echo "‚úÖ No OPA violations found"
                    fi
                  else
                    echo "‚ùå OPA evaluation failed with exit code $opa_exit_code"
                    echo "Error details: $opa_result"
                  fi
                else
                  echo "‚ùå Policy syntax error in tagging.rego"
                  opa fmt .infracost/policies/tagging.rego 2>&1 | sed 's/^/  /'
                fi
              fi
              
              echo "----------------------------------------"
            fi
          done
          
          # Summary of untagged resources
          if [ ${#untagged_resources[@]} -gt 0 ]; then
            echo ""
            echo "üìä SUMMARY: Resources Missing Required Tags"
            echo "=============================================="
            printf '%s\n' "${untagged_resources[@]}" | sort | uniq
            echo ""
            echo "üè∑Ô∏è Required tags: Environment, Owner, Project, CostCenter"
            echo "üìù Add these tags to your Terraform resources to pass policy checks."
          else
            echo ""
            echo "üéâ All resources have the required tags!"
          fi
          
          echo "TAGGING_VIOLATIONS=$policy_violations" >> $GITHUB_ENV
          echo "UNTAGGED_RESOURCE_COUNT=${#untagged_resources[@]}" >> $GITHUB_ENV

      - name: Run Governance Policies  
        continue-on-error: true
        run: |
          echo "üõ°Ô∏è  Checking Governance Policies..."
          
          policy_violations=0
          
          # Check against Infracost breakdown for cost policies
          if [ -f "/tmp/infracost-breakdown.json" ]; then
            # Validate JSON first
            if ! jq empty /tmp/infracost-breakdown.json 2>/dev/null; then
              echo "‚ùå Invalid JSON in infracost-breakdown.json"
              echo "GOVERNANCE_VIOLATIONS=1" >> $GITHUB_ENV
              exit 0
            fi
            
            if [ -f ".infracost/policies/governance.rego" ]; then
              # Test policy syntax
              if opa fmt .infracost/policies/governance.rego > /dev/null 2>&1; then
                result=$(opa eval --data .infracost/policies/governance.rego --input /tmp/infracost-breakdown.json --format=json 'data.infracost.policies.governance.deny[_]' 2>&1)
                opa_exit_code=$?
                
                if [ $opa_exit_code -eq 0 ]; then
                  if [ "$result" != "[]" ] && [ "$result" != "" ]; then
                    echo "‚ùå Governance policy violations found:"
                    echo "$result" | jq -r '.[] | "  ‚Ä¢ " + .msg' 2>/dev/null || echo "  ‚Ä¢ Policy violation detected"
                    policy_violations=$((policy_violations + 1))
                  fi
                  
                  # Check warnings too
                  warnings=$(opa eval --data .infracost/policies/governance.rego --input /tmp/infracost-breakdown.json --format=json 'data.infracost.policies.governance.warn[_]' 2>/dev/null || echo '[]')
                  
                  if [ "$warnings" != "[]" ] && [ "$warnings" != "" ]; then
                    echo "‚ö†Ô∏è  Governance policy warnings:"
                    echo "$warnings" | jq -r '.[] | "  ‚Ä¢ " + .msg' 2>/dev/null || echo "  ‚Ä¢ Policy warning detected"
                  fi
                else
                  echo "‚ùå OPA governance evaluation failed with exit code $opa_exit_code"
                  echo "Error: $result"
                fi
              else
                echo "‚ùå Governance policy syntax error"
                opa fmt .infracost/policies/governance.rego 2>&1 | sed 's/^/  /'
              fi
            else
              echo "‚ö†Ô∏è governance.rego policy file not found"
            fi
          else
            echo "‚ö†Ô∏è Infracost breakdown file not found"
          fi
          
          if [ $policy_violations -eq 0 ]; then
            echo "‚úÖ No governance policy violations found"
          fi
          
          echo "GOVERNANCE_VIOLATIONS=$policy_violations" >> $GITHUB_ENV

      - name: Show current cost breakdown
        run: |
          echo "üí∞ Current Infrastructure Costs:"
          breakdown_output=$(infracost breakdown --config-file=.infracost/infracost.yml --format=table)
          echo "$breakdown_output"
          
          # Check if there are any costs
          if echo "$breakdown_output" | grep -q "OVERALL TOTAL.*\$0.00"; then
            echo ""
            echo "‚ÑπÔ∏è  All resources are currently free!"
          else
            echo ""
            echo "üí° See breakdown above for cost details"
          fi

      - name: Create policy summary comment
        run: |
          echo "Creating policy summary..."
          
          # Create a summary of policy results
          cat > /tmp/policy-summary.txt << EOF
          
          ## üîç Policy Check Results
          
          **Tagging Policies:** $([ "${TAGGING_VIOLATIONS:-0}" -eq 0 ] && echo "‚úÖ Passed" || echo "‚ùå ${TAGGING_VIOLATIONS} violations")
          **Governance Policies:** $([ "${GOVERNANCE_VIOLATIONS:-0}" -eq 0 ] && echo "‚úÖ Passed" || echo "‚ùå ${GOVERNANCE_VIOLATIONS} violations")
          
          $([ "${UNTAGGED_RESOURCE_COUNT:-0}" -gt 0 ] && echo "
          üè∑Ô∏è **Untagged Resources:** ${UNTAGGED_RESOURCE_COUNT} resources missing required tags
          
          **Required Tags:** Environment, Owner, Project, CostCenter
          **Fix:** Add these tags to your Terraform resources." || echo "")
          
          $([ "${TAGGING_VIOLATIONS:-0}" -gt 0 ] || [ "${GOVERNANCE_VIOLATIONS:-0}" -gt 0 ] && echo "
          ‚ö†Ô∏è **Policy violations detected!** See workflow logs for details.
          
          **Enforcement:** All billable resources must comply with governance standards." || echo "
          üéâ **All policies passed!** Your infrastructure changes comply with governance standards.")
          
          EOF

      - name: Post Infracost comment
        run: |
          # Combine Infracost report with policy summary
          infracost comment github --path=/tmp/infracost.json \
                                   --repo=$GITHUB_REPOSITORY \
                                   --github-token=${{ github.token }} \
                                   --pull-request=${{ github.event.pull_request.number }} \
                                   --behavior=update
          
          # Add policy summary as a separate comment
          if [ -f /tmp/policy-summary.txt ]; then
            gh pr comment ${{ github.event.pull_request.number }} --body "$(cat /tmp/policy-summary.txt)"
          fi
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Fail on policy violations
        run: |
          total_violations=$((${TAGGING_VIOLATIONS:-0} + ${GOVERNANCE_VIOLATIONS:-0}))
          
          if [ $total_violations -gt 0 ]; then
            echo "‚ùå Total policy violations: $total_violations"
            echo "üìã Breakdown:"
            echo "  - Tagging violations: ${TAGGING_VIOLATIONS:-0}"
            echo "  - Governance violations: ${GOVERNANCE_VIOLATIONS:-0}"
            echo "  - Untagged resources: ${UNTAGGED_RESOURCE_COUNT:-0}"
            echo ""
            echo "Please fix the policy violations before merging this PR."
            exit 1
          else
            echo "‚úÖ All policies passed!"
          fi