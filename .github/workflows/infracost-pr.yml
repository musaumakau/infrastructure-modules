name: Infracost PR Analysis
on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'eks/**'
      - 'vpc/**'
      - 'kubernetes-addons/**'
      - '.infracost/**'

jobs:
  infracost:
    name: Cost Analysis and Policy Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Setup OPA
        uses: open-policy-agent/setup-opa@v2
        with:
          version: latest

      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: '${{ github.event.pull_request.base.ref }}'

      - name: Generate Infracost cost estimate baseline
        run: |
          infracost breakdown --config-file=.infracost/infracost.yml \
                              --format=json \
                              --out-file=/tmp/infracost-base.json

      - name: Checkout PR branch
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      # ADD THIS STEP: Setup mock variables for CI
      - name: Setup mock variables for Terraform modules
        run: |
          # Copy example tfvars files to terraform.tfvars for each module
          for dir in eks vpc kubernetes-addons; do
            if [ -d "$dir" ] && [ -f "$dir/terraform.tfvars.example" ]; then
              echo "Setting up variables for $dir module..."
              cp "$dir/terraform.tfvars.example" "$dir/terraform.tfvars"
            elif [ -d "$dir" ]; then
              echo "⚠️  Warning: No terraform.tfvars.example found for $dir module"
            fi
          done

      - name: Terraform Init and Plan (for policy evaluation)
        run: |
          # Initialize and plan each module for policy evaluation
          for dir in eks vpc kubernetes-addons; do
            if [ -d "$dir" ]; then
              echo "Planning $dir module..."
              cd $dir
              terraform init -input=false
              terraform plan -out=tfplan.binary -input=false || echo "Plan failed for $dir, continuing..."
              terraform show -json tfplan.binary > ../tfplan-${dir}.json 2>/dev/null || echo "Show failed for $dir, continuing..."
              cd ..
            fi
          done

      - name: Generate Infracost breakdown for policies
        run: |
          infracost breakdown --config-file=.infracost/infracost.yml \
                              --format=json \
                              --out-file=/tmp/infracost-breakdown.json

      - name: Generate Infracost diff
        run: |
          infracost diff --config-file=.infracost/infracost.yml \
                          --format=json \
                          --compare-to=/tmp/infracost-base.json \
                          --out-file=/tmp/infracost.json

      - name: Run Tagging Policies
        continue-on-error: true
        run: |
          echo "🏷️  Checking Tagging Policies..."
          
          # Check if we have terraform plan files to evaluate
          policy_violations=0
          
          for plan_file in tfplan-*.json; do
            if [ -f "$plan_file" ]; then
              echo "Evaluating $plan_file against tagging policies..."
              
              # Run OPA eval against the terraform plan with better error handling
              result=$(opa eval --data .infracost/policies/tagging.rego --input "$plan_file" --format=json 'data.infracost.policies.tagging.deny[_]' 2>&1)
              
              echo "DEBUG: Raw result for $plan_file: $result"
              
              if [ "$result" != "[]" ] && [ "$result" != "" ] && [ "$result" != "null" ]; then
                echo "❌ Tagging policy violations found in $plan_file:"
                # Try multiple ways to parse the result
                echo "$result" | jq -r 'if type == "array" then .[] | "  • " + (.msg // tostring) else "  • " + . end' 2>/dev/null || {
                  echo "$result" | jq -r '.[] | "  • " + (.msg // .)' 2>/dev/null || {
                    echo "  • Raw violation: $result"
                  }
                }
                policy_violations=$((policy_violations + 1))
              else
                echo "✅ No violations found in $plan_file"
              fi
            fi
          done
          
          # Also check against Infracost breakdown
          if [ -f "/tmp/infracost-breakdown.json" ]; then
            echo "Evaluating Infracost breakdown against policies..."
            result=$(opa eval --data .infracost/policies/tagging.rego --input /tmp/infracost-breakdown.json --format=json 'data.infracost.policies.tagging.deny[_]' 2>&1)
            
            echo "DEBUG: Raw Infracost result: $result"
            
            if [ "$result" != "[]" ] && [ "$result" != "" ] && [ "$result" != "null" ]; then
              echo "❌ Tagging policy violations found:"
              echo "$result" | jq -r 'if type == "array" then .[] | "  • " + (.msg // tostring) else "  • " + . end' 2>/dev/null || {
                echo "$result" | jq -r '.[] | "  • " + (.msg // .)' 2>/dev/null || {
                  echo "  • Raw violation: $result"
                }
              }
              policy_violations=$((policy_violations + 1))
            else
              echo "✅ No violations found in Infracost breakdown"
            fi
          fi
          
          if [ $policy_violations -eq 0 ]; then
            echo "✅ No tagging policy violations found"
          fi
          
          echo "TAGGING_VIOLATIONS=$policy_violations" >> $GITHUB_ENV

      - name: Run Governance Policies  
        continue-on-error: true
        run: |
          echo "🛡️  Checking Governance Policies..."
          
          policy_violations=0
          
          # Check against Infracost breakdown for cost policies
          if [ -f "/tmp/infracost-breakdown.json" ]; then
            result=$(opa eval --data .infracost/policies/governance.rego --input /tmp/infracost-breakdown.json --format=json 'data.infracost.policies.governance.deny[_]' 2>/dev/null || echo '[]')
            
            if [ "$result" != "[]" ] && [ "$result" != "" ]; then
              echo "❌ Governance policy violations found:"
              echo "$result" | jq -r '.[] | "  • " + .msg' 2>/dev/null || echo "  • Policy violation detected"
              policy_violations=$((policy_violations + 1))
            fi
            
            # Check warnings too
            warnings=$(opa eval --data .infracost/policies/governance.rego --input /tmp/infracost-breakdown.json --format=json 'data.infracost.policies.governance.warn[_]' 2>/dev/null || echo '[]')
            
            if [ "$warnings" != "[]" ] && [ "$warnings" != "" ]; then
              echo "⚠️  Governance policy warnings:"
              echo "$warnings" | jq -r '.[] | "  • " + .msg' 2>/dev/null || echo "  • Policy warning detected"
            fi
          fi
          
          if [ $policy_violations -eq 0 ]; then
            echo "✅ No governance policy violations found"
          fi
          
          echo "GOVERNANCE_VIOLATIONS=$policy_violations" >> $GITHUB_ENV

      - name: Show current cost breakdown
        run: |
          echo "💰 Current Infrastructure Costs:"
          breakdown_output=$(infracost breakdown --config-file=.infracost/infracost.yml --format=table)
          echo "$breakdown_output"
          
          # Check if there are any costs
          if echo "$breakdown_output" | grep -q "OVERALL TOTAL.*\$0.00"; then
            echo ""
            echo "ℹ️  All resources are currently free!"
          else
            echo ""
            echo "💡 See breakdown above for cost details"
          fi

      - name: Create policy summary comment
        run: |
          echo "Creating policy summary..."
          
          # Create a summary of policy results
          cat > /tmp/policy-summary.txt << EOF
          
          ## 🔍 Policy Check Results
          
          **Tagging Policies:** $([ "$TAGGING_VIOLATIONS" -eq 0 ] && echo "✅ Passed" || echo "❌ $TAGGING_VIOLATIONS violations")
          **Governance Policies:** $([ "$GOVERNANCE_VIOLATIONS" -eq 0 ] && echo "✅ Passed" || echo "❌ $GOVERNANCE_VIOLATIONS violations")
          
          $([ "$TAGGING_VIOLATIONS" -gt 0 ] || [ "$GOVERNANCE_VIOLATIONS" -gt 0 ] && echo "
          ⚠️ **Policy violations detected!** See workflow logs for details.
          
          **Required Tags:** Environment, Owner, Project, CostCenter
          **Enforcement:** All billable resources must have proper tags." || echo "
          🎉 **All policies passed!** Your infrastructure changes comply with governance standards.")
          
          EOF

      - name: Post Infracost comment
        run: |
          # Combine Infracost report with policy summary
          infracost comment github --path=/tmp/infracost.json \
                                   --repo=$GITHUB_REPOSITORY \
                                   --github-token=${{ github.token }} \
                                   --pull-request=${{ github.event.pull_request.number }} \
                                   --behavior=update
          
          # Add policy summary as a separate comment
          if [ -f /tmp/policy-summary.txt ]; then
            gh pr comment ${{ github.event.pull_request.number }} --body "$(cat /tmp/policy-summary.txt)"
          fi
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Fail on policy violations
        run: |
          total_violations=$((TAGGING_VIOLATIONS + GOVERNANCE_VIOLATIONS))
          
          if [ $total_violations -gt 0 ]; then
            echo "❌ Total policy violations: $total_violations"
            echo "Please fix the policy violations before merging this PR."
            exit 1
          else
            echo "✅ All policies passed!"
          fi