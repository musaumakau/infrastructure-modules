name: Infracost PR Analysis
on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'eks/**'
      - 'vpc/**'
      - 'kubernetes-addons/**'
      - '.infracost/**'

jobs:
  infracost:
    name: Cost Analysis and Policy Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Setup OPA
        uses: open-policy-agent/setup-opa@v2
        with:
          version: latest

      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: '${{ github.event.pull_request.base.ref }}'

      - name: Generate Infracost cost estimate baseline
        run: |
          infracost breakdown --config-file=.infracost/infracost.yml \
                              --format=json \
                              --out-file=/tmp/infracost-base.json

      - name: Checkout PR branch
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Setup mock variables for Terraform modules
        run: |
          for dir in eks vpc kubernetes-addons; do
            if [ -d "$dir" ]; then
              echo "Processing $dir module..."
              example_file=$(find "$dir" -name "*terraform.tfvars.example" -type f | head -1)
              if [ -n "$example_file" ]; then
                echo "‚úÖ Found example file: $example_file"
                cp "$example_file" "$dir/terraform.tfvars"
                echo "‚úÖ Copied $(basename "$example_file") to $dir/terraform.tfvars"
              else
                echo "‚ö†Ô∏è Creating minimal terraform.tfvars for $dir"
                cat > "$dir/terraform.tfvars" << 'EOF'
          # Minimal configuration for CI/CD pipeline
          cluster_name = "ci-test-cluster"
          environment = "ci"
          
          # Common tags for compliance
          common_tags = {
            Environment = "ci"
            Owner       = "platform-team"
            Project     = "infrastructure"
            CostCenter  = "engineering"
          }
          EOF
              fi
            fi
          done

      - name: Terraform Init and Plan
        run: |
          for dir in eks vpc kubernetes-addons; do
            if [ -d "$dir" ]; then
              echo "Planning $dir module..."
              cd $dir
              if grep -q "backend" *.tf 2>/dev/null; then
                terraform init -backend=false -input=false
              else
                terraform init -input=false
              fi
              
              if terraform validate; then
                if terraform plan -out=tfplan.binary -input=false -detailed-exitcode; then
                  terraform show -json tfplan.binary > ../tfplan-${dir}.json 2>/dev/null || echo '{"resource_changes": []}' > ../tfplan-${dir}.json
                else
                  plan_exit_code=$?
                  if [ $plan_exit_code -eq 2 ]; then
                    terraform show -json tfplan.binary > ../tfplan-${dir}.json 2>/dev/null || echo '{"resource_changes": []}' > ../tfplan-${dir}.json
                  else
                    echo '{"resource_changes": []}' > ../tfplan-${dir}.json
                  fi
                fi
              else
                echo '{"resource_changes": []}' > ../tfplan-${dir}.json
              fi
              cd ..
            fi
          done

      - name: Generate Infracost breakdown
        run: |
          infracost breakdown --config-file=.infracost/infracost.yml \
                              --format=json \
                              --out-file=/tmp/infracost-breakdown.json

      - name: Generate Infracost diff
        run: |
          infracost diff --config-file=.infracost/infracost.yml \
                          --format=json \
                          --compare-to=/tmp/infracost-base.json \
                          --out-file=/tmp/infracost.json

      - name: Run Tagging Policies
        continue-on-error: true
        run: |
          echo "üè∑Ô∏è Checking Tagging Policies..."
          policy_violations=0
          untagged_resources=()
          
          for plan_file in tfplan-*.json; do
            if [ -f "$plan_file" ] && jq empty "$plan_file" 2>/dev/null; then
              resource_count=$(jq '.resource_changes | length' "$plan_file" 2>/dev/null || echo "0")
              
              if [ "$resource_count" -gt 0 ]; then
                missing_tags=$(jq -r '
                  .resource_changes[]? | 
                  select(.change.actions[]? == "create" or .change.actions[]? == "update") |
                  select(.type | test("aws_(instance|ebs_volume|eks_cluster|eks_node_group|rds_instance|s3_bucket|elasticache|lambda_function|ecs_service|security_group|launch_template|autoscaling_group)")) |
                  select(.change.after.tags // {} | 
                    (has("Environment") and has("Owner") and has("Project") and has("CostCenter")) | not
                  ) |
                  {
                    resource: .address,
                    type: .type,
                    missing_tags: (["Environment", "Owner", "Project", "CostCenter"] - (.change.after.tags // {} | keys))
                  }
                ' "$plan_file" 2>/dev/null)
                
                if [ "$missing_tags" != "[]" ] && [ "$missing_tags" != "" ] && [ "$missing_tags" != "null" ]; then
                  echo "‚ùå Resources with missing tags in $plan_file:"
                  echo "$missing_tags" | jq -r '"  ‚Ä¢ " + .resource + " (" + .type + ") - Missing: " + (.missing_tags | join(", "))'
                  
                  while IFS= read -r resource; do
                    [ -n "$resource" ] && untagged_resources+=("$resource")
                  done < <(echo "$missing_tags" | jq -r '.resource' 2>/dev/null || echo "")
                  
                  policy_violations=$((policy_violations + 1))
                fi
              fi
            fi
          done
          
          if [ ${#untagged_resources[@]} -gt 0 ]; then
            echo ""
            echo "üìä SUMMARY: Resources Missing Required Tags"
            printf '%s\n' "${untagged_resources[@]}" | sort | uniq
            echo "Required tags: Environment, Owner, Project, CostCenter"
          fi
          
          echo "TAGGING_VIOLATIONS=$policy_violations" >> $GITHUB_ENV
          echo "UNTAGGED_RESOURCE_COUNT=${#untagged_resources[@]}" >> $GITHUB_ENV

      - name: Run Governance Policies
        continue-on-error: true
        run: |
          echo "üõ°Ô∏è Checking Governance Policies..."
          policy_violations=0
          
          if [ -f "/tmp/infracost-breakdown.json" ] && [ -f ".infracost/policies/governance.rego" ]; then
            if jq empty /tmp/infracost-breakdown.json 2>/dev/null; then
              if grep -q "any(" .infracost/policies/governance.rego; then
                sed 's/any(/some /g' .infracost/policies/governance.rego > /tmp/governance-fixed.rego
                policy_file="/tmp/governance-fixed.rego"
              else
                policy_file=".infracost/policies/governance.rego"
              fi
              
              if opa fmt "$policy_file" > /dev/null 2>&1; then
                result=$(opa eval --data "$policy_file" --input /tmp/infracost-breakdown.json --format=json 'data.infracost.policies.governance.deny[_]' 2>&1)
                if [ $? -eq 0 ] && [ "$result" != "[]" ] && [ "$result" != "" ]; then
                  echo "‚ùå Governance policy violations:"
                  echo "$result" | jq -r '.[] | "  ‚Ä¢ " + .msg' 2>/dev/null || echo "  ‚Ä¢ Policy violation detected"
                  policy_violations=1
                fi
              fi
            fi
          fi
          
          echo "GOVERNANCE_VIOLATIONS=$policy_violations" >> $GITHUB_ENV

      - name: Create policy summary
        run: |
          cat > /tmp/policy-summary.txt << 'EOF'
          ## üîç Policy Check Results
          
          **Tagging Policies:** $([ "${TAGGING_VIOLATIONS:-0}" -eq 0 ] && echo "‚úÖ Passed" || echo "‚ùå ${TAGGING_VIOLATIONS} violations")
          **Governance Policies:** $([ "${GOVERNANCE_VIOLATIONS:-0}" -eq 0 ] && echo "‚úÖ Passed" || echo "‚ùå ${GOVERNANCE_VIOLATIONS} violations")
          
          $([ "${UNTAGGED_RESOURCE_COUNT:-0}" -gt 0 ] && echo "üè∑Ô∏è **Untagged Resources:** ${UNTAGGED_RESOURCE_COUNT} resources missing required tags" || echo "")
          
          **Required Tags:** Environment, Owner, Project, CostCenter
          EOF

      - name: Post Infracost comment
        run: |
          infracost comment github --path=/tmp/infracost.json \
                                   --repo=$GITHUB_REPOSITORY \
                                   --github-token=${{ github.token }} \
                                   --pull-request=${{ github.event.pull_request.number }} \
                                   --behavior=update

      - name: Fail on policy violations
        run: |
          total_violations=$((${TAGGING_VIOLATIONS:-0} + ${GOVERNANCE_VIOLATIONS:-0}))
          if [ $total_violations -gt 0 ]; then
            echo "‚ùå Total policy violations: $total_violations"
            echo "Please fix policy violations before merging."
            exit 1
          else
            echo "‚úÖ All policies passed!"
          fi